name: CI - Test and Validate

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # Install development tools
        pip install flake8 mypy pytest pytest-cov
    
    - name: Lint with flake8 (critical errors only)
      run: |
        # Only check for critical syntax errors, not undefined names in scripts
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=scripts/
    
    - name: Lint main application files
      run: |
        # Check main app files more strictly
        flake8 app.py backend/ --count --max-line-length=127 --statistics || echo "Linting completed with warnings"
    
    - name: Type check with mypy
      run: |
        export PYTHONPATH="${PYTHONPATH}:${PWD}"
        mypy app.py backend/ || echo "MyPy check completed with warnings"
    
    - name: Test with pytest (if tests exist)
      run: |
        if [ -d "tests" ]; then
          export PYTHONPATH="${PYTHONPATH}:${PWD}"
          pytest tests/ --cov=backend --cov-report=xml --cov-report=html
        else
          echo "No tests directory found, skipping tests"
        fi
    
    - name: Upload coverage to Codecov
      if: success() && hashFiles('coverage.xml') != ''
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  frontend-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install security tools
      run: |
        pip install bandit safety
    
    - name: Run Bandit security scan
      run: |
        bandit -r backend/ -f json -o bandit-report.json || echo "Bandit scan completed"
    
    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || echo "Safety check completed"
    
    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
